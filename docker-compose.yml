version: "3.9"

services:
  app:
    build:
      context: .
    image: api-service
    depends_on:
      postgres:
        condition: service_started
      qdrant:
        condition: service_started
      s3:
        condition: service_started
      s3-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      DEV_MODE: "${DEV_MODE:-false}"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
      ALLOWED_HOSTS: "${ALLOWED_HOSTS:-*}"
      QDRANT_HOST: "${QDRANT_HOST:-qdrant}"
      QDRANT_PORT: "${QDRANT_PORT:-6333}"
      QDRANT_API_KEY: "${QDRANT_API_KEY:-}"
      QDRANT_COLLECTION: "${QDRANT_COLLECTION:-medical_cases}"
      QDRANT_DISTANCE: "${QDRANT_DISTANCE:-cosine}"
      QDRANT_IMAGE_WEIGHT: "${QDRANT_IMAGE_WEIGHT:-0.4}"
      DATABASE_DSN: "${DATABASE_DSN:-postgresql+asyncpg://postgres:postgres@postgres:5432/medical}"
      DATABASE_ECHO: "${DATABASE_ECHO:-false}"
      S3_BUCKET: "${S3_BUCKET:-medical-cases}"
      S3_ENDPOINT_URL: "${S3_ENDPOINT_URL:-http://s3:9000}"
      S3_REGION: "${S3_REGION:-us-east-1}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY:-minioadmin}"
      S3_SECRET_KEY: "${S3_SECRET_KEY:-minioadmin}"
      S3_USE_SSL: "${S3_USE_SSL:-false}"
    ports:
      - "8000:8000"
    volumes:
      - hf_models:/models

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${POSTGRES_DB:-medical}"
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-postgres}"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  qdrant:
    image: qdrant/qdrant:v1.8.4
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage

  s3:
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: "${S3_ACCESS_KEY:-minioadmin}"
      MINIO_ROOT_PASSWORD: "${S3_SECRET_KEY:-minioadmin}"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - s3_data:/data

  s3-init:
    image: minio/mc:latest
    depends_on:
      s3:
        condition: service_started
    environment:
      S3_ENDPOINT_URL: "${S3_ENDPOINT_URL:-http://s3:9000}"
      S3_BUCKET: "${S3_BUCKET:-medical-cases}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY:-minioadmin}"
      S3_SECRET_KEY: "${S3_SECRET_KEY:-minioadmin}"
    entrypoint: >-
      /bin/sh -c "
      set -euo pipefail;
      until mc alias set local "$${S3_ENDPOINT_URL}" "$${S3_ACCESS_KEY}" "$${S3_SECRET_KEY}"; do
        echo 'Waiting for MinIO...';
        sleep 1;
      done;
      mc mb --ignore-existing local/$${S3_BUCKET};
      mc anonymous set download local/$${S3_BUCKET};
      "
    restart: "no"

volumes:
  postgres_data:
  qdrant_data:
  hf_models:
  s3_data:
